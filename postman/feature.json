{
	"info": {
		"_postman_id": "2f755cad-426d-4b8a-9dc4-1b5a829be7e3",
		"name": "Sprint 17",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43583960",
		"_collection_link": "https://vladimir-7479045.postman.co/workspace/Vladimir's-Workspace~5347dbfa-6014-4f15-8e6a-c36f576fac51/collection/43583960-2f755cad-426d-4b8a-9dc4-1b5a829be7e3?action=share&source=collection_link&creator=43583960"
	},
	"item": [
		{
			"name": "comment",
			"item": [
				{
					"name": "Добавление нового пользователя",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Пользователь успешно создан\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('id');\r",
									"    pm.expect(responseJson).to.have.property('name');\r",
									"    pm.expect(responseJson).to.have.property('email');\r",
									"});\r",
									"\r",
									"// Сохраняем ID пользователя для последующих тестов\r",
									"if (pm.response.code === 201) {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.environment.set(\"userId\", responseJson.id);\r",
									"    console.log(\"Created user with ID:\", responseJson.id);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Тестовый Пользователь\",\r\n    \"email\": \"test@example.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание категории",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Категория успешно создана\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('id');\r",
									"    pm.expect(responseJson).to.have.property('name');\r",
									"});\r",
									"\r",
									"// Сохраняем ID категории для создания события\r",
									"if (pm.response.code === 201) {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.environment.set(\"categoryId\", responseJson.id);\r",
									"    console.log(\"Created category with ID:\", responseJson.id);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Технологии\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание события",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Событие успешно создано\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('id');\r",
									"    pm.expect(responseJson).to.have.property('title');\r",
									"    pm.expect(responseJson).to.have.property('annotation');\r",
									"});\r",
									"\r",
									"// Сохраняем ID события для тестов комментариев\r",
									"if (pm.response.code === 201) {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.environment.set(\"eventId\", responseJson.id);\r",
									"    console.log(\"Created event with ID:\", responseJson.id);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"annotation\": \"Тестовое событие для проверки API комментариев\",\r\n    \"category\": {{categoryId}},\r\n    \"description\": \"Подробное описание тестового события, которое будет использоваться для тестирования функциональности комментариев в системе Explore With Me.\",\r\n    \"eventDate\": \"2026-12-31 18:00:00\",\r\n    \"location\": {\r\n        \"lat\": 55.7558,\r\n        \"lon\": 37.6176\r\n    },\r\n    \"paid\": false,\r\n    \"participantLimit\": 100,\r\n    \"requestModeration\": true,\r\n    \"title\": \"Тестовое событие для комментариев\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Публикация события администратором",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Событие опубликовано\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.state).to.eql(\"PUBLISHED\");\r",
									"});\r",
									"\r",
									"pm.test(\"Событие содержит обязательные поля\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('id');\r",
									"    pm.expect(responseJson).to.have.property('title');\r",
									"    pm.expect(responseJson).to.have.property('annotation');\r",
									"    pm.expect(responseJson).to.have.property('state');\r",
									"});\r",
									"\r",
									"pm.test(\"ID события остается неизменным\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    const eventId = parseInt(pm.environment.get(\"eventId\"));\r",
									"    pm.expect(responseJson.id).to.eql(eventId);\r",
									"});\r",
									"\r",
									"console.log(\"Event published successfully with ID:\", pm.environment.get(\"eventId\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/events/{{eventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events",
								"{{eventId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание комментария (успешный сценарий)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ содержит обязательные поля\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('id');\r",
									"    pm.expect(responseJson).to.have.property('text');\r",
									"    pm.expect(responseJson).to.have.property('author');\r",
									"    pm.expect(responseJson).to.have.property('eventId');\r",
									"    pm.expect(responseJson).to.have.property('createdOn');\r",
									"});\r",
									"\r",
									"pm.test(\"Текст комментария соответствует запросу\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.text).to.eql(\"Отличное событие! Обязательно пойду!\");\r",
									"});\r",
									"\r",
									"// Сохраняем ID комментария для последующих тестов\r",
									"if (pm.response.code === 201) {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.environment.set(\"commentId\", responseJson.id);\r",
									"    pm.environment.set(\"userId\", responseJson.author.id);\r",
									"    pm.environment.set(\"eventId\", responseJson.eventId);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Отличное событие! Обязательно пойду!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/events/{{eventId}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"events",
								"{{eventId}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание комментария с пустым текстом (валидация)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/events/{{eventId}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"events",
								"{{eventId}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев к событию",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ является массивом\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Комментарии имеют требуемую структуру\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    if (responseJson.length > 0) {\r",
									"        const comment = responseJson[0];\r",
									"        pm.expect(comment).to.have.property('id');\r",
									"        pm.expect(comment).to.have.property('text');\r",
									"        pm.expect(comment).to.have.property('author');\r",
									"        pm.expect(comment).to.have.property('eventId');\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/events/{{eventId}}/comments?from=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								"{{eventId}}",
								"comments"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление комментария пользователем",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Текст комментария обновлен\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.text).to.eql(\"Обновленный комментарий! Событие действительно интересное.\");\r",
									"});\r",
									"\r",
									"pm.test(\"ID комментария остается неизменным\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(parseInt(pm.environment.get(\"commentId\")));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Обновленный комментарий! Событие действительно интересное.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/comments/{{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Модерация комментария администратором",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Статус комментария обновлен\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.status).to.eql(\"CONFIRMED\");\r",
									"});\r",
									"\r",
									"pm.test(\"Текст комментария обновлен\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.text).to.eql(\"Модерация комментария\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Модерация комментария\",\r\n    \"status\": \"CONFIRMED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/comments/{{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Поиск комментариев администратором",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ является массивом\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Все комментарии имеют статус CONFIRMED\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    responseJson.forEach(comment => {\r",
									"        pm.expect(comment.status).to.eql(\"CONFIRMED\");\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Все комментарии принадлежат указанному событию\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    const eventId = parseInt(pm.environment.get(\"eventId\"));\r",
									"    responseJson.forEach(comment => {\r",
									"        pm.expect(comment.eventId).to.eql(eventId);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments?status=CONFIRMED&eventId={{eventId}}&from=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "status",
									"value": "CONFIRMED"
								},
								{
									"key": "eventId",
									"value": "{{eventId}}"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление комментария пользователем",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Тело ответа пустое\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(\"\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/comments/{{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Попытка обновления несуществующего комментария",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Сообщение об ошибке указывает, что комментарий не найден\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message).to.include(\"не найден\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Попытка обновить несуществующий комментарий\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/comments/99999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"comments",
								"99999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Попытка создания комментария к несуществующему событию",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Комментарий к несуществующему событию\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/events/99999/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"events",
								"99999",
								"comments"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "default"
		}
	]
}